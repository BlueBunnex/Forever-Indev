package net.minecraft.client.gui;

import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.nio.ByteBuffer;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import javax.imageio.ImageIO;

import org.lwjgl.BufferUtils;
import org.lwjgl.opengl.GL11;

import net.minecraft.client.Minecraft;
import net.minecraft.client.renderer.texture.TextureUtil;
import net.minecraft.client.renderer.Tessellator;

public class ScreenshotManager {

    private final Minecraft mc;
    private BufferedImage lastScreenshot;
    private List<File> screenshots = new ArrayList<>();
    public static final int PREVIEW_SIZE = 64;
    private static final File SCREENSHOT_DIR = new File("screenshots");

    public ScreenshotManager(Minecraft mc) {
        this.mc = mc;
        if (!SCREENSHOT_DIR.exists()) {
            SCREENSHOT_DIR.mkdir();
        }
    }

    public void captureScreenshot() {
        int width = this.mc.displayWidth;
        int height = this.mc.displayHeight;
        ByteBuffer buffer = BufferUtils.createByteBuffer(width * height * 4);
        GL11.glReadPixels(0, 0, width, height, GL11.GL_RGBA, GL11.GL_UNSIGNED_BYTE, buffer);

        BufferedImage image = new BufferedImage(width, height, BufferedImage.TYPE_INT_RGB);

        for (int x = 0; x < width; x++) {
            for (int y = 0; y < height; y++) {
                int i = (x + (width * y)) * 4;
                int r = buffer.get(i) & 0xFF;
                int g = buffer.get(i + 1) & 0xFF;
                int b = buffer.get(i + 2) & 0xFF;
                image.setRGB(x, height - (y + 1), ((r << 16) | (g << 8) | b));
            }
        }

        saveScreenshot(image);
        lastScreenshot = image;
    }

    private void saveScreenshot(BufferedImage image) {
        String timestamp = new SimpleDateFormat("yyyy-MM-dd_HH.mm.ss").format(new Date());
        File file = new File(SCREENSHOT_DIR, "screenshot_" + timestamp + ".png");

        try {
            ImageIO.write(image, "PNG", file);
            screenshots.add(file);
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    public void drawScreenshotPreview(int screenWidth, int screenHeight) {
        if (lastScreenshot != null) {
            int x = screenWidth - PREVIEW_SIZE - 10;
            int y = 10;
            drawBorderedRect(x, y, x + PREVIEW_SIZE, y + PREVIEW_SIZE, 0xFFFFFFFF);
            drawImage(lastScreenshot, x + 1, y + 1, PREVIEW_SIZE - 2, PREVIEW_SIZE - 2);
        }
    }

    private void drawBorderedRect(int left, int top, int right, int bottom, int borderColor) {
        GL11.glDisable(GL11.GL_TEXTURE_2D);
        Tessellator tessellator = Tessellator.instance;
        tessellator.startDrawingQuads();
        tessellator.setColorOpaque_I(borderColor);
        tessellator.addVertex(left, bottom, 0);
        tessellator.addVertex(right, bottom, 0);
        tessellator.addVertex(right, top, 0);
        tessellator.addVertex(left, top, 0);
        tessellator.draw();
        GL11.glEnable(GL11.GL_TEXTURE_2D);
    }

    private void drawImage(BufferedImage image, int x, int y, int width, int height) {
        int[] pixels = new int[image.getWidth() * image.getHeight()];
        image.getRGB(0, 0, image.getWidth(), image.getHeight(), pixels, 0, image.getWidth());

        ByteBuffer buffer = BufferUtils.createByteBuffer(image.getWidth() * image.getHeight() * 4);

        for (int i = 0; i < pixels.length; i++) {
            int pixel = pixels[i];
            buffer.put((byte) ((pixel >> 16) & 0xFF));
            buffer.put((byte) ((pixel >> 8) & 0xFF));
            buffer.put((byte) (pixel & 0xFF));
            buffer.put((byte) ((pixel >> 24) & 0xFF));
        }

        buffer.flip();

        int textureId = TextureUtil.glGenTextures();
        GL11.glBindTexture(GL11.GL_TEXTURE_2D, textureId);
        GL11.glTexImage2D(GL11.GL_TEXTURE_2D, 0, GL11.GL_RGBA, image.getWidth(), image.getHeight(), 0, GL11.GL_RGBA, GL11.GL_UNSIGNED_BYTE, buffer);
        GL11.glTexParameteri(GL11.GL_TEXTURE_2D, GL11.GL_TEXTURE_MIN_FILTER, GL11.GL_NEAREST);
        GL11.glTexParameteri(GL11.GL_TEXTURE_2D, GL11.GL_TEXTURE_MAG_FILTER, GL11.GL_NEAREST);

        GL11.glEnable(GL11.GL_TEXTURE_2D);
        GL11.glBindTexture(GL11.GL_TEXTURE_2D, textureId);

        Tessellator tessellator = Tessellator.instance;
        tessellator.startDrawingQuads();
        tessellator.addVertexWithUV(x, y + height, 0, 0, 1);
        tessellator.addVertexWithUV(x + width, y + height, 0, 1, 1);
        tessellator.addVertexWithUV(x + width, y, 0, 1, 0);
        tessellator.addVertexWithUV(x, y, 0, 0, 0);
        tessellator.draw();

        GL11.glDeleteTextures(textureId);
        GL11.glDisable(GL11.GL_TEXTURE_2D);
    }

    public void openScreenshotManager() {
        Minecraft.getMinecraft().displayGuiScreen(new GuiScreenshotManager(this));
    }

    public List<File> getScreenshots() {
        return screenshots;
    }
}
