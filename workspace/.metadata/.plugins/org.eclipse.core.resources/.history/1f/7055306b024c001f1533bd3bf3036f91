package net.minecraft.client.gui;

import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;
import java.util.Scanner;
import net.minecraft.client.Minecraft;

public class GuiConfirmationScreen extends GuiScreen {

    private final GuiIngameMenu parentScreen;
    private boolean isRememberChecked = false;
    private GuiButtonText rememberButton;

    public GuiConfirmationScreen(GuiIngameMenu parentScreen) {
        this.parentScreen = parentScreen;
    }

    @Override
    public void initGui() {
        this.controlList.clear();
        this.controlList.add(new GuiButtonText(0, this.width / 2 - 100, this.height / 4 + 24, "Save and Exit"));
        this.controlList.add(new GuiButtonText(1, this.width / 2 - 100, this.height / 4 + 48, "Exit Without Saving"));
        this.controlList.add(new GuiButtonText(2, this.width / 2 - 100, this.height / 4 + 72, "Cancel"));

        this.rememberButton = new GuiButtonText(3, this.width / 2 - 100, this.height / 4 + 96, "Remember this choice: OFF");
        this.controlList.add(rememberButton);

        // Load remember choice from the options file
        loadRememberChoice();
    }

    @Override
    protected void actionPerformed(GuiButton button) {
        switch (button.id) {
            case 0:
                // Save level and then exit
                if (this.mc.session != null) {
                    this.mc.displayGuiScreen(new GuiSaveLevel(this.parentScreen));
                }
                exit();
                break;

            case 1:
                // Exit without saving
                exit();
                break;

            case 2:
                // Cancel and return to the game
                this.mc.displayGuiScreen(this.parentScreen);
                break;

            case 3:
                // Toggle the remember choice
                isRememberChecked = !isRememberChecked;
                rememberButton.displayString = "Remember this choice: " + (isRememberChecked ? "ON" : "OFF");
                break;
        }
    }

    private void exit() {
        if (isRememberChecked) {
            saveRememberChoice();
        }
        this.mc.theWorld = null;
        this.mc.displayGuiScreen(null);
    }

    private void saveRememberChoice() {
        File optionsFile = new File(this.mc.mcDataDir, "options.txt");
        try {
            // Create a temporary file
            File tempFile = new File(optionsFile.getAbsolutePath() + ".tmp");
            PrintWriter writer = new PrintWriter(new FileWriter(tempFile));

            // Copy current options to temp file, updating the remember exit choice
            try (Scanner scanner = new Scanner(optionsFile)) {
                boolean updated = false;
                while (scanner.hasNextLine()) {
                    String line = scanner.nextLine();
                    if (line.startsWith("remember_exit_choice")) {
                        writer.println("remember_exit_choice=" + (isRememberChecked ? "true" : "false"));
                        updated = true;
                    } else {
                        writer.println(line);
                    }
                }
                if (!updated) {
                    writer.println("remember_exit_choice=" + (isRememberChecked ? "true" : "false"));
                }
            }
            writer.close();

            // Replace old options file with the temp file
            if (!optionsFile.delete()) {
                System.out.println("Could not delete old options file");
            }
            if (!tempFile.renameTo(optionsFile)) {
                System.out.println("Could not rename temp file to options file");
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private void loadRememberChoice() {
        File optionsFile = new File(this.mc.mcDataDir, "options.txt");
        try (Scanner scanner = new Scanner(optionsFile)) {
            while (scanner.hasNextLine()) {
                String line = scanner.nextLine();
                if (line.startsWith("remember_exit_choice")) {
                    isRememberChecked = line.split("=")[1].equals("true");
                    rememberButton.displayString = "Remember this choice: " + (isRememberChecked ? "ON" : "OFF");
                    break;
                }
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    @Override
    public void drawScreen(int mouseX, int mouseY) {
        this.drawDefaultBackground();
        drawCenteredString(this.fontRenderer, "You have unsaved changes. Do you want to save them before exiting?", this.width / 2, this.height / 4 - 40, 16777215);
        super.drawScreen(mouseX, mouseY);
    }
}
