package net.minecraft.client.gui;

import net.minecraft.client.render.Tessellator;
import org.lwjgl.opengl.GL11;
import util.MathHelper;

import java.text.SimpleDateFormat;
import java.util.Date;

public final class GuiMainMenu extends GuiScreen {

    private static final String[] SPLASHES = new String[] {
        "Not-quite indev!",
        "Chests on the glass door!",
        "NP is not in P!",
        "The blue-twintailed girl is right!",
        "In development hell, did I development sin?",
        "Bubbles from the gum machine!",
        "[INSERT SPLASH HERE]",
        "Full-stop!",
        "[EXTREMELY LOUD INCORRECT BUZZER]",
        "Bricks in the wall!",
        "Catch the falling stars!",
        "Syntax error at line 42!",
        "Glitches in the matrix!",
        "Null pointer exception!",
        "Endless loops ahead!",
        "In the rabbit hole!",
        "Blue screen of life!",
        "Assembly required!",
        "Pixels and polygons!",
        "Legacy code detected!",
        "Unicorns in disguise!",
        "404: Splash not found!",
        "Press F to pay respects!"
    };
    private static final String CURRENT_SPLASH = SPLASHES[(int) (Math.random() * SPLASHES.length)];

    public GuiMainMenu() {
        // No additional initialization needed for splashes
    }

    public final void updateScreen() {}

    protected final void keyTyped(char character, int keycode) {}

    public final void initGui() {
        this.controlList.clear();
        this.controlList.add(new GuiButtonText(1, this.width / 2 - 100, this.height / 4 + 48, "Generate new level..."));
        this.controlList.add(new GuiButtonText(2, this.width / 2 - 100, this.height / 4 + 72, "Load level..."));
        this.controlList.add(new GuiButtonText(0, this.width / 2 - 100, this.height / 4 + 96, "Options..."));
        this.controlList.add(new GuiButtonText(3, this.width / 2 - 100, this.height / 4 + 132, "Exit Game"));

        // Disable load level button if no session
        if (this.mc.session == null) {
            this.controlList.get(1).enabled = false;
        }
    }

    protected final void actionPerformed(GuiButton button) {
        switch (button.id) {
            case 0:
                this.mc.displayGuiScreen(new GuiOptions(this, this.mc.options));
                break;
            case 1:
                this.mc.displayGuiScreen(new GuiNewLevel(this));
                break;
            case 2:
                if (this.mc.session != null) {
                    this.mc.displayGuiScreen(new GuiLoadLevel(this));
                }
                break;
            case 3:
                this.mc.shutdownMinecraftApplet();
                break;
        }
    }

    public final void drawScreen(int mouseX, int mouseY) {
        this.drawDefaultBackground();

        // Set texture filtering to linear
        GL11.glTexParameteri(GL11.GL_TEXTURE_2D, GL11.GL_TEXTURE_MAG_FILTER, GL11.GL_LINEAR);
        GL11.glTexParameteri(GL11.GL_TEXTURE_2D, GL11.GL_TEXTURE_MIN_FILTER, GL11.GL_LINEAR);

        // Draw the logo
        GL11.glBindTexture(GL11.GL_TEXTURE_2D, this.mc.renderEngine.getTexture("/gui/logo.png"));
        GL11.glColor4f(1.0F, 1.0F, 1.0F, 1.0F);
        Tessellator.instance.setColorOpaque_I(16777215);
        this.drawTexturedModalRect((this.width - 256) / 2, 30, 0, 0, 256, 64);

        // Draw "Forever Indev" text in cyan under the logo, moved up and larger
        GL11.glPushMatrix();
        GL11.glTranslatef((this.width / 2), 75.0F, 0.0F); // Move it up more
        float scaleIndev = 1.5F; // Make it larger
        GL11.glScalef(scaleIndev, scaleIndev, 1);
        String indevText = "Forever Indev";
        drawCenteredString(this.fontRenderer, indevText, 0, 0, 65535);  // 65535 is the color code for cyan
        GL11.glPopMatrix();

        // Draw other elements
        String text = "Made by Blue. Distribute!";
        drawString(this.fontRenderer, text, this.width - this.fontRenderer.getStringWidth(text) - 2, this.height - 10, 16777215);

        // Memory info
        long maxMem = Runtime.getRuntime().maxMemory();
        long totalMem = Runtime.getRuntime().totalMemory();
        long freeMem = Runtime.getRuntime().freeMemory();
        long usedMem = totalMem - freeMem;

        text = "Free memory: " + usedMem * 100L / maxMem + "% of " + maxMem / 1024L / 1024L + "MB";
        drawString(this.fontRenderer, text, this.width - this.fontRenderer.getStringWidth(text) - 2, 2, 8421504);

        text = "Allocated memory: " + totalMem * 100L / maxMem + "% (" + totalMem / 1024L / 1024L + "MB)";
        drawString(this.fontRenderer, text, this.width - this.fontRenderer.getStringWidth(text) - 2, 12, 8421504);

        // Draw current date and time
        SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
        String dateTime = dateFormat.format(new Date());
        drawString(this.fontRenderer, "Current time: " + dateTime, 2, 2, 16777215);

        // CPU usage info (example placeholder)
        String cpuUsage = "CPU usage: 45%";  // In a real scenario, use system APIs to get the actual CPU usage
        drawString(this.fontRenderer, cpuUsage, 2, 12, 16777215);

        // Draw buttons and splash text
        super.drawScreen(mouseX, mouseY);

        // Draw splash text
        GL11.glPushMatrix();
        GL11.glTranslatef((float) (this.width / 2 + 110), 85.0F, 0.0F);
        GL11.glRotatef(-20.0F, 0.0F, 0.0F, 1.0F);

        float scale = 1.8F - MathHelper.abs(MathHelper.sin((float)(System.currentTimeMillis() % 1000L) / 1000.0F * (float)Math.PI * 2.0F) * 0.1F);
        scale = scale * 100.0F / (float)(this.fontRenderer.getStringWidth(CURRENT_SPLASH) + 32);
        GL11.glScalef(scale, scale, 1);
        drawCenteredString(this.fontRenderer, CURRENT_SPLASH, 0, -8, 16776960);

        GL11.glPopMatrix();
    }
}
package net.minecraft.client.gui;

import net.minecraft.client.GameSettings;

public final class GuiOptions extends GuiScreen {
	
	private GuiScreen parentScreen;
	private String screenTitle = "Options";
	private GameSettings options;

	public GuiOptions(GuiScreen var1, GameSettings var2) {
		this.parentScreen = var1;
		this.options = var2;
	}

	public final void initGui() {
		for(int i = 0; i < this.options.numberOfOptions; i++) {
			this.controlList.add(new GuiButtonText(i, this.width / 2 - 155 + i % 2 * 160, this.height / 6 + 24 * (i >> 1), 150, 20, this.options.setOptionString(i)));
		}

		this.controlList.add(new GuiButtonText(100, this.width / 2 - 100, this.height / 6 + 120 + 12, "Controls..."));
		this.controlList.add(new GuiButtonText(200, this.width / 2 - 100, this.height / 6 + 168, "Done"));
	}

	protected final void actionPerformed(GuiButton button) {
		
		if (!button.enabled)
			return;
			
		if (button.id < 100) {
			this.options.setOptionValue(button.id, 1);
			((GuiButtonText) button).displayString = this.options.setOptionString(button.id);
		}

		else if (button.id == 100) {
			this.mc.displayGuiScreen(new GuiControls(this, this.options));
		}

		else if (button.id == 200) {
			this.mc.displayGuiScreen(this.parentScreen);
		}
	}

	public final void drawScreen(int mouseX, int mouseY) {
		this.drawDefaultBackground();
		drawCenteredString(this.fontRenderer, this.screenTitle, this.width / 2, 20, 16777215);
		
		super.drawScreen(mouseX, mouseY);
	}
}
package net.minecraft.client;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.PrintWriter;
import org.lwjgl.input.Keyboard;

public final class GameSettings {
    private static final String[] RENDER_DISTANCES = new String[]{ "Far", "Normal", "Short", "Tiny" };
    private static final String[] DIFFICULTIES = new String[]{ "Peaceful", "Easy", "Normal", "Hard" };
    
    private Minecraft mc;
    private File optionsFile;

    public int numberOfOptions = 10; // Updated number of options
    public int difficulty = 2;
    public boolean thirdPersonView = false;
    public boolean music = true;
    public boolean sound = true;
    public boolean invertMouse = false;
    public boolean showFPS = false;
    public int renderDistance = 0;
    public boolean fancyGraphics = true;
    public boolean anaglyph = false;
    public boolean limitFramerate = false;
    public boolean showExitConfirmation = true; // New setting for confirmation screen
    
    public KeyBinding keyBindForward = new KeyBinding("Forward", 17);
    public KeyBinding keyBindLeft = new KeyBinding("Left", 30);
    public KeyBinding keyBindBack = new KeyBinding("Back", 31);
    public KeyBinding keyBindRight = new KeyBinding("Right", 32);
    public KeyBinding keyBindJump = new KeyBinding("Jump", 57);
    public KeyBinding keyBindInventory = new KeyBinding("Inventory", 18);
    public KeyBinding keyBindDrop = new KeyBinding("Drop", 16);
    public KeyBinding keyBindChat = new KeyBinding("Chat", 20);
    public KeyBinding keyBindToggleFog = new KeyBinding("Toggle fog", 33);
    public KeyBinding keyBindSave = new KeyBinding("Save location", 28);
    public KeyBinding keyBindLoad = new KeyBinding("Load location", 19);
    
    public KeyBinding[] keyBindings = new KeyBinding[]{this.keyBindForward, this.keyBindLeft, this.keyBindBack, this.keyBindRight, this.keyBindJump, this.keyBindDrop, this.keyBindInventory, this.keyBindChat, this.keyBindToggleFog, this.keyBindSave, this.keyBindLoad};

    public GameSettings(Minecraft mc, File fileRoot) {
        this.mc = mc;
        this.optionsFile = new File(fileRoot, "options.txt");
        this.loadOptions();
    }

    public final String setKeyBindingString(int keyBindID) {
        return this.keyBindings[keyBindID].keyDescription + ": " + Keyboard.getKeyName(this.keyBindings[keyBindID].keyCode);
    }

    public final void setKeyBinding(int keyBindID, int keyCode) {
        this.keyBindings[keyBindID].keyCode = keyCode;
        this.saveOptions();
    }

    public final void setOptionValue(int optionID, int value) {
        switch (optionID) {
            case 0:
                this.music = !this.music;
                this.mc.sndManager.onSoundOptionsChanged();
                break;
                
            case 1:
                this.sound = !this.sound;
                this.mc.sndManager.onSoundOptionsChanged();
                break;
                
            case 2:
                this.invertMouse = !this.invertMouse;
                break;
                
            case 3:
                this.showFPS = !this.showFPS;
                break;
                
            case 4:
                this.renderDistance = this.renderDistance + value & 3;
                break;
                
            case 5:
                this.fancyGraphics = !this.fancyGraphics;
                break;
                
            case 6:
                this.anaglyph = !this.anaglyph;
                this.mc.renderEngine.refreshTextures();
                break;
                
            case 7:
                this.limitFramerate = !this.limitFramerate;
                break;
                
            case 8:
                this.difficulty = this.difficulty + value & 3;
                break;
                
            case 9: // New option ID for confirmation setting
                this.showExitConfirmation = !this.showExitConfirmation;
                break;
        }

        this.saveOptions();
    }

    public final String setOptionString(int optionID) {
        switch (optionID) {
            case 0: return "Music: " + (this.music ? "ON" : "OFF");
            case 1: return "Sound: " + (this.sound ? "ON" : "OFF");
            case 2: return "Invert mouse: " + (this.invertMouse ? "ON" : "OFF");
            case 3: return "Show debug: " + (this.showFPS ? "ON" : "OFF");
            case 4: return "Render distance: " + RENDER_DISTANCES[this.renderDistance];
            case 5: return "View bobbing: " + (this.fancyGraphics ? "ON" : "OFF");
            case 6: return "3d anaglyph: " + (this.anaglyph ? "ON" : "OFF");
            case 7: return "Limit framerate: " + (this.limitFramerate ? "ON" : "OFF");
            case 8: return "Difficulty: " + DIFFICULTIES[this.difficulty];
            case 9: return "Show exit confirmation: " + (this.showExitConfirmation ? "ON" : "OFF");
            default: return "";
        }
    }

    private void loadOptions() {
        try {
            if (this.optionsFile.exists()) {
                BufferedReader var1 = new BufferedReader(new FileReader(this.optionsFile));

                while (true) {
                    String var2 = var1.readLine();
                    if (var2 == null) {
                        var1.close();
                        return;
                    }

                    String[] var5 = var2.split(":");
                    switch (var5[0]) {
                        case "music":
                            this.music = var5[1].equals("true");
                            break;
                        case "sound":
                            this.sound = var5[1].equals("true");
                            break;
                        case "invertYMouse":
                            this.invertMouse = var5[1].equals("true");
                            break;
                        case "showFrameRate":
                            this.showFPS = var5[1].equals("true");
                            break;
                        case "viewDistance":
                            this.renderDistance = Integer.parseInt(var5[1]);
                            break;
                        case "bobView":
                            this.fancyGraphics = var5[1].equals("true");
                            break;
                        case "anaglyph3d":
                            this.anaglyph = var5[1].equals("true");
                            break;
                        case "limitFramerate":
                            this.limitFramerate = var5[1].equals("true");
                            break;
                        case "difficulty":
                            this.difficulty = Integer.parseInt(var5[1]);
                            break;
                        case "showExitConfirmation": // Load new setting
                            this.showExitConfirmation = var5[1].equals("true");
                            break;
                        default:
                            for (int var3 = 0; var3 < this.keyBindings.length; ++var3) {
                                if (var5[0].equals("key_" + this.keyBindings[var3].keyDescription)) {
                                    this.keyBindings[var3].keyCode = Integer.parseInt(var5[1]);
                                }
                            }
                            break;
                    }
                }
            }
        } catch (Exception var4) {
            System.out.println("Failed to load options");
            var4.printStackTrace();
        }
    }

    public final void saveOptions() {
        try {
            PrintWriter out = new PrintWriter(new FileWriter(this.optionsFile));
            out.println("music:" + this.music);
            out.println("sound:" + this.sound);
            out.println("invertYMouse:" + this.invertMouse);
            out.println("showFrameRate:" + this.showFPS);
            out.println("viewDistance:" + this.renderDistance);
            out.println("bobView:" + this.fancyGraphics);
            out.println("anaglyph3d:" + this.anaglyph);
            out.println("limitFramerate:" + this.limitFramerate);
            out.println("difficulty:" + this.difficulty);
            out.println("showExitConfirmation:" + this.showExitConfirmation);

            for (int i = 0; i < this.keyBindings.length; i++) {
                out.println("key_" + this.keyBindings[i].keyDescription + ":" + this.keyBindings[i].keyCode);
            }

            out.close();
            
        } catch (Exception e) {
            System.out.println("Failed to save options");
            e.printStackTrace();
        }
    }
}