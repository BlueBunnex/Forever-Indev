package net.minecraft.client;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.PrintWriter;
import org.lwjgl.input.Keyboard;

public final class GameSettings {
    private static final String[] RENDER_DISTANCES = new String[]{ "Far", "Normal", "Short", "Tiny" };
    private static final String[] DIFFICULTIES = new String[]{ "Peaceful", "Easy", "Normal", "Hard" };

    // Date/Time format options and their descriptions
    private static final String[] DATE_FORMATS = {
        "yyyy-MM-dd HH:mm:ss",       // Standard ISO format
        "MM/dd/yyyy HH:mm:ss",       // US format
        "dd MMM yyyy HH:mm:ss",      // European format
        "MMMM d, yyyy",              // Full Month Day, Year format
        "d MMM yyyy",                // Day Month Year format
        "yyyy/MM/dd",                // Year/Month/Day format
        "M/d/yyyy",                  // Short US format
        "d/M/yyyy",                  // Short European format
        "dd-MM-yyyy",                // Day-Month-Year with dashes
        "MMMM d'th', yyyy"           // Month Day'th', Year format
    };

    // Descriptions for the date formats
    private static final String[] DATE_FORMAT_DESCRIPTIONS = {
        "ISO standard format: 2024-07-27 13:45:00",
        "US format: 07/27/2024 13:45:00",
        "European format: 27 Jul 2024 13:45:00",
        "Full Month Day, Year format: July 27, 2024",
        "Day Month Year format: 27 Jul 2024",
        "Year/Month/Day format: 2024/07/27",
        "Short US format: 7/27/2024",
        "Short European format: 27/07/2024",
        "Day-Month-Year with dashes: 27-07-2024",
        "Month Day'th', Year format: July 27'the', 2024"
    };

    private Minecraft mc;
    private File optionsFile;

    public int numberOfOptions = 13; // Updated number of options to include date/time format
    public int difficulty = 2;
    public boolean thirdPersonView = false;
    public boolean music = true;
    public boolean sound = true;
    public boolean invertMouse = false;
    public boolean showFPS = false;
    public int renderDistance = 0;
    public boolean fancyGraphics = true;
    public boolean anaglyph = false;
    public boolean limitFramerate = false;
    public boolean showExitConfirmation = true; // Setting for confirmation screen
    public boolean fullscreen = false; // Setting for fullscreen mode
    public int dateFormatIndex = 0; // Index for the selected date format

    public KeyBinding keyBindForward = new KeyBinding("Forward", 17);
    public KeyBinding keyBindLeft = new KeyBinding("Left", 30);
    public KeyBinding keyBindBack = new KeyBinding("Back", 31);
    public KeyBinding keyBindRight = new KeyBinding("Right", 32);
    public KeyBinding keyBindJump = new KeyBinding("Jump", 57);
    public KeyBinding keyBindInventory = new KeyBinding("Inventory", 18);
    public KeyBinding keyBindDrop = new KeyBinding("Drop", 16);
    public KeyBinding keyBindChat = new KeyBinding("Chat", 20);
    public KeyBinding keyBindToggleFog = new KeyBinding("Toggle fog", 33);
    public KeyBinding keyBindSave = new KeyBinding("Save location", 28);
    public KeyBinding keyBindLoad = new KeyBinding("Load location", 19);

    public KeyBinding[] keyBindings = new KeyBinding[]{this.keyBindForward, this.keyBindLeft, this.keyBindBack, this.keyBindRight, this.keyBindJump, this.keyBindDrop, this.keyBindInventory, this.keyBindChat, this.keyBindToggleFog, this.keyBindSave, this.keyBindLoad};

    public GameSettings(Minecraft mc, File fileRoot) {
        this.mc = mc;
        this.optionsFile = new File(fileRoot, "options.txt");
        this.loadOptions();
    }

    public final String setKeyBindingString(int keyBindID) {
        return this.keyBindings[keyBindID].keyDescription + ": " + Keyboard.getKeyName(this.keyBindings[keyBindID].keyCode);
    }

    public final void setKeyBinding(int keyBindID, int keyCode) {
        this.keyBindings[keyBindID].keyCode = keyCode;
        this.saveOptions();
    }

    public final void setOptionValue(int optionID, int value) {
        switch (optionID) {
            case 0:
                this.music = !this.music;
                this.mc.sndManager.onSoundOptionsChanged();
                break;
                
            case 1:
                this.sound = !this.sound;
                this.mc.sndManager.onSoundOptionsChanged();
                break;
                
            case 2:
                this.invertMouse = !this.invertMouse;
                break;
                
            case 3:
                this.showFPS = !this.showFPS;
                break;
                
            case 4:
                this.renderDistance = (this.renderDistance + value) & 3;
                break;
                
            case 5:
                this.fancyGraphics = !this.fancyGraphics;
                break;
                
            case 6:
                this.anaglyph = !this.anaglyph;
                this.mc.renderEngine.refreshTextures();
                break;
                
            case 7:
                this.limitFramerate = !this.limitFramerate;
                break;
                
            case 8:
                this.difficulty = (this.difficulty + value) & 3;
                break;
                
            case 9:
                this.showExitConfirmation = !this.showExitConfirmation;
                break;
                
            case 10:
                this.fullscreen = !this.fullscreen;
                break;
                
            case 11:
                this.dateFormatIndex = (this.dateFormatIndex + value + DATE_FORMATS.length) % DATE_FORMATS.length;
                break;
        }

        this.saveOptions();
    }

    public final String setOptionString(int optionID) {
        switch (optionID) {
            case 0: return "Music: " + (this.music ? "ON" : "OFF");
            case 1: return "Sound: " + (this.sound ? "ON" : "OFF");
            case 2: return "Invert mouse: " + (this.invertMouse ? "ON" : "OFF");
            case 3: return "Show debug: " + (this.showFPS ? "ON" : "OFF");
            case 4: return "Render distance: " + RENDER_DISTANCES[this.renderDistance];
            case 5: return "View bobbing: " + (this.fancyGraphics ? "ON" : "OFF");
            case 6: return "3D anaglyph: " + (this.anaglyph ? "ON" : "OFF");
            case 7: return "Limit framerate: " + (this.limitFramerate ? "ON" : "OFF");
            case 8: return "Difficulty: " + DIFFICULTIES[this.difficulty];
            case 9: return "Show exit confirmation: " + (this.showExitConfirmation ? "ON" : "OFF");
            case 10: return "Fullscreen: " + (this.fullscreen ? "ON" : "OFF");
            case 11: return "Date/Time format: " + DATE_FORMATS[this.dateFormatIndex] + " - " + DATE_FORMAT_DESCRIPTIONS[this.dateFormatIndex];
            default: return "";
        }
    }

    private void loadOptions() {
        try {
            if (this.optionsFile.exists()) {
                BufferedReader reader = new BufferedReader(new FileReader(this.optionsFile));

                String line;
                while ((line = reader.readLine()) != null) {
                    String[] parts = line.split(":");
                    switch (parts[0]) {
                        case "music":
                            this.music = parts[1].equals("true");
                            break;
                        case "sound":
                            this.sound = parts[1].equals("true");
                            break;
                        case "invertYMouse":
                            this.invertMouse = parts[1].equals("true");
                            break;
                        case "showFrameRate":
                            this.showFPS = parts[1].equals("true");
                            break;
                        case "viewDistance":
                            this.renderDistance = Integer.parseInt(parts[1]);
                            break;
                        case "bobView":
                            this.fancyGraphics = parts[1].equals("true");
                            break;
                        case "anaglyph3d":
                            this.anaglyph = parts[1].equals("true");
                            break;
                        case "limitFramerate":
                            this.limitFramerate = parts[1].equals("true");
                            break;
                        case "difficulty":
                            this.difficulty = Integer.parseInt(parts[1]);
                            break;
                        case "showExitConfirmation":
                            this.showExitConfirmation = parts[1].equals("true");
                            break;
                        case "fullscreen":
                            this.fullscreen = parts[1].equals("true");
                            break;
                        case "dateFormat":
                            this.dateFormatIndex = Integer.parseInt(parts[1]);
                            break;
                        default:
                            for (int i = 0; i < this.keyBindings.length; ++i) {
                                if (parts[0].equals("key_" + this.keyBindings[i].keyDescription)) {
                                    this.keyBindings[i].keyCode = Integer.parseInt(parts[1]);
                                }
                            }
                            break;
                    }
                }
                reader.close();
            }
        } catch (Exception e) {
            System.out.println("Failed to load options");
            e.printStackTrace();
        }
    }

    public final void saveOptions() {
        try {
            PrintWriter out = new PrintWriter(new FileWriter(this.optionsFile));
            out.println("music:" + this.music);
            out.println("sound:" + this.sound);
            out.println("invertYMouse:" + this.invertMouse);
            out.println("showFrameRate:" + this.showFPS);
            out.println("viewDistance:" + this.renderDistance);
            out.println("bobView:" + this.fancyGraphics);
            out.println("anaglyph3d:" + this.anaglyph);
            out.println("limitFramerate:" + this.limitFramerate);
            out.println("difficulty:" + this.difficulty);
            out.println("showExitConfirmation:" + this.showExitConfirmation);
            out.println("fullscreen:" + this.fullscreen);
            out.println("dateFormat:" + this.dateFormatIndex);
            for (KeyBinding keyBinding : this.keyBindings) {
                out.println("key_" + keyBinding.keyDescription + ":" + keyBinding.keyCode);
            }
            out.close();
        } catch (Exception e) {
            System.out.println("Failed to save options");
            e.printStackTrace();
        }
    }
}
