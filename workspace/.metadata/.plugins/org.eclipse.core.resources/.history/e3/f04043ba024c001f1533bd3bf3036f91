package net.minecraft.client;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.PrintWriter;
import org.lwjgl.input.Keyboard;

public final class GameSettings {

    private static final String[] RENDER_DISTANCES = new String[]{ "Far", "Normal", "Short", "Tiny" };
    private static final String[] DIFFICULTIES = new String[]{ "Peaceful", "Easy", "Normal", "Hard" };

    private Minecraft mc;
    private File optionsFile;

    public int numberOfOptions = 10; // Updated to account for the new option
    public int difficulty = 2;
    public boolean thirdPersonView = false;
    public boolean music = true;
    public boolean sound = true;
    public boolean invertMouse = false;
    public boolean showFPS = false;
    public int renderDistance = 0;
    public boolean fancyGraphics = true;
    public boolean anaglyph = false;
    public boolean limitFramerate = false;
    public boolean showExitWarning = true; // New option

    // Other existing fields...

    public GameSettings(Minecraft mc, File fileRoot) {
        this.mc = mc;
        this.optionsFile = new File(fileRoot, "options.txt");
        this.loadOptions();
    }

    // Other existing methods...

    public final void setOptionValue(int optionID, int value) {
        switch (optionID) {
            // Existing cases...
            case 9: // New case for Show Exit Warning
                this.showExitWarning = !this.showExitWarning;
                break;
        }
        this.saveOptions();
    }

    public final String setOptionString(int optionID) {
        switch (optionID) {
            // Existing cases...
            case 9: return "Show Exit Warning: " + (this.showExitWarning ? "ON" : "OFF");
            default: return "";
        }
    }

    private void loadOptions() {
        try {
            if (this.optionsFile.exists()) {
                BufferedReader reader = new BufferedReader(new FileReader(this.optionsFile));
                String line;
                while ((line = reader.readLine()) != null) {
                    String[] parts = line.split(":");
                    if (parts[0].equals("showExitWarning")) {
                        this.showExitWarning = parts[1].equals("true");
                    }
                    // Other existing option loading...
                }
                reader.close();
            }
        } catch (Exception e) {
            System.out.println("Failed to load options");
            e.printStackTrace();
        }
    }

    public final void saveOptions() {
        try {
            PrintWriter writer = new PrintWriter(new FileWriter(this.optionsFile));
            writer.println("showExitWarning:" + this.showExitWarning);
            // Other existing option saving...
            writer.close();
        } catch (Exception e) {
            System.out.println("Failed to save options");
            e.printStackTrace();
        }
    }
}
