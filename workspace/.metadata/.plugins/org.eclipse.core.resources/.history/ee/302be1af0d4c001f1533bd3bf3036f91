package net.minecraft.client.render.entity;

import java.util.Random;
import net.minecraft.client.gui.FontRenderer;
import net.minecraft.client.render.RenderBlocks;
import net.minecraft.client.render.RenderEngine;
import net.minecraft.client.render.Tessellator;
import net.minecraft.game.entity.Entity;
import net.minecraft.game.entity.misc.EntityItem;
import net.minecraft.game.item.ItemStack;
import net.minecraft.game.level.block.Block;
import org.lwjgl.opengl.GL11;
import util.MathHelper;

public final class RenderItem extends Render {
    private RenderBlocks renderBlocks = new RenderBlocks();
    private Random random = new Random();

    public RenderItem() {
        this.shadowSize = 0.15F;
        this.shadowOpaque = 12.0F / 16.0F;
    }

    public final void renderItemIntoGUI(RenderEngine var1, ItemStack var2, int var3, int var4) {
        if (var2 != null) {
            int var9;
            if (var2.itemID < 256 && Block.blocksList[var2.itemID].getRenderType() == 0) {
                var9 = var2.itemID;
                RenderEngine.bindTexture(var1.getTexture("/terrain.png"));
                Block var8 = Block.blocksList[var9];
                GL11.glPushMatrix();
                GL11.glTranslatef((float) (var3 - 2), (float) (var4 + 3), 0.0F);
                GL11.glScalef(10.0F, 10.0F, 10.0F);
                GL11.glTranslatef(1.0F, 0.5F, 8.0F);
                GL11.glRotatef(210.0F, 1.0F, 0.0F, 0.0F);
                GL11.glRotatef(45.0F, 0.0F, 1.0F, 0.0F);
                GL11.glColor4f(1.0F, 1.0F, 1.0F, 1.0F);
                this.renderBlocks.renderBlockOnInventory(var8);
                GL11.glPopMatrix();
            } else {
                if (var2.getItem().getIconIndex() >= 0) {
                    GL11.glDisable(GL11.GL_LIGHTING);
                    if (var2.itemID < 256) {
                        RenderEngine.bindTexture(var1.getTexture("/terrain.png"));
                    } else {
                        RenderEngine.bindTexture(var1.getTexture("/gui/items.png"));
                    }

                    int var10000 = var3;
                    int var10001 = var4;
                    int var10002 = var2.getItem().getIconIndex() % 16 << 4;
                    int var10003 = var2.getItem().getIconIndex() / 16 << 4;
                    boolean var6 = true;
                    var6 = true;
                    var4 = var10003;
                    var3 = var10002;
                    var9 = var10001;
                    int var7 = var10000;
                    Tessellator var5 = Tessellator.instance;
                    var5.startDrawingQuads();
                    var5.addVertexWithUV((float) var7, (float) (var9 + 16), 0.0F, (float) var3 * 0.00390625F, (float) (var4 + 16) * 0.00390625F);
                    var5.addVertexWithUV((float) (var7 + 16), (float) (var9 + 16), 0.0F, (float) (var3 + 16) * 0.00390625F, (float) (var4 + 16) * 0.00390625F);
                    var5.addVertexWithUV((float) (var7 + 16), (float) var9, 0.0F, (float) (var3 + 16) * 0.00390625F, (float) var4 * 0.00390625F);
                    var5.addVertexWithUV((float) var7, (float) var9, 0.0F, (float) var3 * 0.00390625F, (float) var4 * 0.00390625F);
                    var5.draw();
                    GL11.glEnable(GL11.GL_LIGHTING);
                }
            }
        }
    }

    public final void renderItemOverlayIntoGUI(FontRenderer var1, ItemStack var2, int var3, int var4) {
        if (var2 != null) {
            if (var2.stackSize > 1) {
                String var5 = "" + var2.stackSize;
                GL11.glDisable(GL11.GL_LIGHTING);
                GL11.glDisable(GL11.GL_DEPTH_TEST);
                var1.drawStringWithShadow(var5, var3 + 19 - 2 - var1.getStringWidth(var5), var4 + 6 + 3, 16777215);
                GL11.glEnable(GL11.GL_LIGHTING);
                GL11.glEnable(GL11.GL_DEPTH_TEST);
            }

            if (var2.itemDamage > 0) {
                int var9 = 13 - var2.itemDamage * 13 / var2.isItemStackDamageable();
                int var7 = 255 - var2.itemDamage * 255 / var2.isItemStackDamageable();
                GL11.glDisable(GL11.GL_LIGHTING);
                GL11.glDisable(GL11.GL_DEPTH_TEST);
                GL11.glDisable(GL11.GL_TEXTURE_2D);
                Tessellator var8 = Tessellator.instance;
                int var6 = 255 - var7 << 16 | var7 << 8;
                var7 = (255 - var7) / 4 << 16 | 16128;
                renderQuad(var8, var3 + 2, var4 + 13, 13, 2, 0);
                renderQuad(var8, var3 + 2, var4 + 13, 12, 1, var7);
                renderQuad(var8, var3 + 2, var4 + 13, var9, 1, var6);
                GL11.glEnable(GL11.GL_TEXTURE_2D);
                GL11.glEnable(GL11.GL_LIGHTING);
                GL11.glEnable(GL11.GL_DEPTH_TEST);
                GL11.glColor4f(1.0F, 1.0F, 1.0F, 1.0F);
            }
        }
    }

    private static void renderQuad(Tessellator var0, int var1, int var2, int var3, int var4, int var5) {
        var0.startDrawingQuads();
        var0.setColorOpaque_I(var5);
        var0.addVertex((float) var1, (float) var2, 0.0F);
        var0.addVertex((float) var1, (float) (var2 + var4), 0.0F);
        var0.addVertex((float) (var1 + var3), (float) (var2 + var4), 0.0F);
        var0.addVertex((float) (var1 + var3), (float) var2, 0.0F);
        var0.draw();
    }

    @Override
    public void doRender(Entity entity, float x, float y, float z, float yaw, float partialTicks) {
        EntityItem entityItem = (EntityItem) entity;
        this.random.setSeed(187L);
        ItemStack itemStack = entityItem.item;
        GL11.glPushMatrix();
        float groundOffset = -0.1F; // Partially into the ground
        float rotationAngle = (((float) entityItem.age + partialTicks) / 20.0F + entityItem.hoverStart) * (180.0F / (float) Math.PI);
        byte stackSizeRenderType = 1;
        if (entityItem.item.stackSize > 1) {
            stackSizeRenderType = 2;
        }

        if (entityItem.item.stackSize > 5) {
            stackSizeRenderType = 3;
        }

        if (entityItem.item.stackSize > 20) {
            stackSizeRenderType = 4;
        }

        GL11.glTranslatef(x, y + groundOffset, z);
        GL11.glEnable(GL11.GL_NORMALIZE);
        if (itemStack.itemID < 256 && Block.blocksList[itemStack.itemID].getRenderType() == 0) {
            this.loadTexture("/terrain.png");
            float scale = 0.25F;
            if (!Block.blocksList[itemStack.itemID].renderAsNormalBlock() && itemStack.itemID != Block.slabHalf.blockID) {
                scale = 0.5F;
            }

            GL11.glScalef(scale, scale, scale);

            for (int i = 0; i < stackSizeRenderType; ++i) {
                GL11.glPushMatrix();
                if (i > 0) {
                    float offsetX = (this.random.nextFloat() * 2.0F - 1.0F) * 0.2F / scale;
                    float offsetY = (this.random.nextFloat() * 2.0F - 1.0F) * 0.2F / scale;
                    float offsetZ = (this.random.nextFloat() * 2.0F - 1.0F) * 0.2F / scale;
                    GL11.glTranslatef(offsetX, offsetY, offsetZ);
                }
                GL11.glRotatef(rotationAngle, 0.0F, 1.0F, 0.0F); // Smooth rotation around y-axis
                this.renderBlocks.renderBlockOnInventory(Block.blocksList[itemStack.itemID]);
                GL11.glPopMatrix();
            }
        } else {
            GL11.glScalef(0.5F, 0.5F, 0.5F);
            int iconIndex = itemStack.getItem().getIconIndex();
            if (itemStack.itemID < 256) {
                this.loadTexture("/terrain.png");
            } else {
                this.loadTexture("/gui/items.png");
            }

            Tessellator tessellator = Tessellator.instance;
            float minU = (float) (iconIndex % 16 << 4) / 256.0F;
            float maxU = (float) ((iconIndex % 16 << 4) + 16) / 256.0F;
            float minV = (float) (iconIndex / 16 << 4) / 256.0F;
            float maxV = (float) ((iconIndex / 16 << 4) + 16) / 256.0F;

            for (int i = 0; i < stackSizeRenderType; ++i) {
                GL11.glPushMatrix();
                if (i > 0) {
                    float offsetX = (this.random.nextFloat() * 2.0F - 1.0F) * 0.3F;
                    float offsetY = (this.random.nextFloat() * 2.0F - 1.0F) * 0.3F;
                    float offsetZ = (this.random.nextFloat() * 2.0F - 1.0F) * 0.3F;
                    GL11.glTranslatef(offsetX, offsetY, offsetZ);
                }

                GL11.glRotatef(180.0F - this.renderManager.playerViewY, 0.0F, 1.0F, 0.0F);
                GL11.glRotatef(rotationAngle, 0.0F, 1.0F, 0.0F); // Smooth rotation around y-axis
                tessellator.startDrawingQuads();
                tessellator.setNormal(0.0F, 1.0F, 0.0F);
                tessellator.addVertexWithUV(-0.5F, -0.25F, 0.0F, minU, maxV);
                tessellator.addVertexWithUV(0.5F, -0.25F, 0.0F, maxU, maxV);
                tessellator.addVertexWithUV(0.5F, 12.0F / 16.0F, 0.0F, maxU, minV);
                tessellator.addVertexWithUV(-0.5F, 12.0F / 16.0F, 0.0F, minU, minV);
                tessellator.draw();
                GL11.glPopMatrix();
            }
        }

        GL11.glDisable(GL11.GL_NORMALIZE);
        GL11.glPopMatrix();
    }
}
