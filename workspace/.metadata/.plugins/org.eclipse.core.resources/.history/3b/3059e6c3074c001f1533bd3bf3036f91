package net.minecraft.client.gui;

import java.awt.Dialog;
import java.awt.FileDialog;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStreamReader;
import java.net.URL;
import net.minecraft.client.PlayerLoader;
import net.minecraft.game.level.World;

public class GuiLoadLevel extends GuiScreen implements Runnable {

	private GuiScreen parent;
	private boolean isFinished = false;
	private boolean isLoaded = false;
	private String[] levels = null;
	private String statusMessage = "";
	protected String title = "Load Level";
	private boolean isFrozen = false;
	private File selectedFile;

	public GuiLoadLevel(GuiScreen parent) {
		this.parent = parent;
	}

	public final void updateScreen() {
		if (this.selectedFile != null) {
			if (!this.selectedFile.getName().endsWith(".mclevel")) {
				this.selectedFile = new File(this.selectedFile.getAbsolutePath() + ".mclevel");
			}
			this.openLevel(this.selectedFile);
			this.selectedFile = null;
			this.mc.displayGuiScreen((GuiScreen) null);
		}
	}

	@Override
	public void run() {
		try {
			this.statusMessage = "Getting level list..";
			URL url = new URL("http://" + this.mc.minecraftUri + "/listmaps.jsp?user=" + this.mc.session.username);
			BufferedReader reader = new BufferedReader(new InputStreamReader(url.openConnection().getInputStream()));
			this.levels = reader.readLine().split(";");
			if (this.levels.length >= 5) {
				this.setLevels(this.levels);
				this.isLoaded = true;
				return;
			}
			this.statusMessage = this.levels[0];
			this.isFinished = true;
		} catch (Exception e) {
			e.printStackTrace();
			this.statusMessage = "Failed to load levels";
			this.isFinished = true;
		}
	}

	protected void setLevels(String[] levels) {
		for (int i = 0; i < 5; i++) {
			GuiButtonText button = (GuiButtonText) this.controlList.get(i);
			button.enabled = !levels[i].equals("-");
			button.displayString = levels[i];
			button.visible = true;
		}
		this.controlList.get(5).visible = true;
	}

	public void initGui() {
		new Thread(this).start();
		for (int i = 0; i < 5; i++) {
			this.controlList.add(new GuiButtonText(i, this.width / 2 - 100, this.height / 6 + i * 24, "---"));
			this.controlList.get(i).visible = false;
		}
		this.controlList.add(new GuiButtonText(5, this.width / 2 - 100, this.height / 6 + 120 + 12, "Load file..."));
		this.controlList.add(new GuiButtonText(6, this.width / 2 - 100, this.height / 6 + 168, "Cancel"));
		this.controlList.get(5).visible = false;
	}

	protected final void actionPerformed(GuiButton button) {
		if (this.isFrozen || !button.enabled) return;
		if (this.isLoaded && button.id < 5) {
			this.openLevel(button.id);
		}
		if (this.isFinished || (this.isLoaded && button.id == 5)) {
			this.isFrozen = true;
			GuiLevelDialog dialog = new GuiLevelDialog(this);
			dialog.setDaemon(true);
			dialog.start();
		}
		if (this.isFinished || (this.isLoaded && button.id == 6)) {
			this.mc.displayGuiScreen(this.parent);
		}
	}

	protected FileDialog saveFileDialog() {
		return new FileDialog((Dialog) null, "Load Level", FileDialog.LOAD);
	}

	protected void openLevel(int index) {
		this.mc.displayGuiScreen(null);
		this.mc.setIngameFocus();
	}

	public final void drawScreen(int mouseX, int mouseY) {
		this.drawDefaultBackground();
		drawCenteredString(this.fontRenderer, this.title, this.width / 2, 20, 16777215);
		if (!this.isLoaded) {
			drawCenteredString(this.fontRenderer, this.statusMessage, this.width / 2, this.height / 2 - 4, 16777215);
		}
		super.drawScreen(mouseX, mouseY);
	}

	protected void openLevel(File file) {
		try (FileInputStream in = new FileInputStream(file)) {
			World world = (new PlayerLoader(this.mc, this.mc.loadingScreen)).load(in);
			this.mc.setLevel(world);
		} catch (IOException e) {
			e.printStackTrace();
		}
	}

	static File setSelectedFile(GuiLoadLevel guiLoadLevel, File file) {
		return guiLoadLevel.selectedFile = file;
	}

	static boolean setFrozen(GuiLoadLevel guiLoadLevel, boolean frozen) {
		return guiLoadLevel.isFrozen = false;
	}
}
