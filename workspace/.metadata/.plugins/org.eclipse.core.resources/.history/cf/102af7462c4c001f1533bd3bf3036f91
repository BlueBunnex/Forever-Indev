package net.minecraft.client.gui;

import net.minecraft.client.GameSettings;
import net.minecraft.client.Minecraft;
import net.minecraft.client.render.Tessellator;
import org.lwjgl.input.Mouse;
import org.lwjgl.opengl.GL11;

public final class GuiOptions extends GuiScreen {

    private GuiScreen parentScreen;
    private String screenTitle = "Options";
    private GameSettings options;
    private int amountScrolled;
    private int top;
    private int bottom;
    private int left;
    private int right;
    private int initialClickY;

    public GuiOptions(GuiScreen parentScreen, GameSettings options) {
        this.parentScreen = parentScreen;
        this.options = options;
        this.amountScrolled = 0;
        this.top = 32;
        this.bottom = this.height - 55 + 4;
        this.left = 0;
        this.right = this.width;
        this.initialClickY = -2;
    }

    @Override
    public final void initGui() {
        this.controlList.clear();
        for (int i = 0; i < this.options.numberOfOptions; i++) {
            this.controlList.add(new GuiButtonText(i, this.width / 2 - 155 + i % 2 * 160, this.height / 6 + 24 * (i >> 1), 150, 20, this.options.setOptionString(i)));
        }
        this.controlList.add(new GuiButtonText(100, this.width / 2 - 100, this.height / 6 + 120 + 12, "Controls..."));
        this.controlList.add(new GuiButtonText(200, this.width / 2 - 100, this.height / 6 + 168, "Done"));
    }

    @Override
    protected final void actionPerformed(GuiButton button) {
        if (!button.enabled)
            return;

        if (button.id < 100) {
            this.options.setOptionValue(button.id, 1);
            ((GuiButtonText) button).displayString = this.options.setOptionString(button.id);
        } else if (button.id == 100) {
            this.mc.displayGuiScreen(new GuiControls(this, this.options));
        } else if (button.id == 200) {
            this.mc.displayGuiScreen(this.parentScreen);
        }
    }

    public final void drawScreen(int mouseX, int mouseY) {
        this.drawDefaultBackground();
        drawCenteredString(this.fontRenderer, this.screenTitle, this.width / 2, 20, 16777215);

        for (GuiButton button : this.controlList) {
            button.drawButton(this.mc, mouseX, mouseY);
        }

        super.drawScreen(mouseX, mouseY);
    }

    public void handleCustomMouseInput() {
        int scrollAmount = Mouse.getDWheel();
        if (scrollAmount != 0) {
            if (scrollAmount > 0) {
                scrollAmount = 1;
            } else {
                scrollAmount = -1;
            }
            this.amountScrolled -= scrollAmount * 10;
        }
    }

    private void renderBackdrop(int startY, int endY, int color1, int color2) {
        Tessellator tessellator = Tessellator.instance;
        GL11.glBindTexture(GL11.GL_TEXTURE_2D, this.mc.renderEngine.getTexture("/dirt.png"));
        GL11.glColor4f(1.0f, 1.0f, 1.0f, 1.0f);
        float textureScale = 32.0f;
        tessellator.startDrawingQuads();
        tessellator.setColorOpaque_I(4210752);
        GL11.glColor4f(0.25f, 0.25f, 0.25f, color2 / 255.0f);
        tessellator.addVertexWithUV(0.0f, endY, 0.0f, 0.0f, endY / textureScale);
        tessellator.addVertexWithUV(this.width, endY, 0.0f, this.width / textureScale, endY / textureScale);
        GL11.glColor4f(0.25f, 0.25f, 0.25f, color1 / 255.0f);
        tessellator.addVertexWithUV(this.width, startY, 0.0f, this.width / textureScale, startY / textureScale);
        tessellator.addVertexWithUV(0.0f, startY, 0.0f, 0.0f, startY / textureScale);
        tessellator.draw();
        GL11.glColor4f(1.0f, 1.0f, 1.0f, 1.0f);
    }
}
