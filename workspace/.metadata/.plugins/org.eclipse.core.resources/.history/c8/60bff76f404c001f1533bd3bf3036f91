package net.minecraft.client.gui;

import net.minecraft.client.render.Tessellator;
import org.lwjgl.opengl.GL11;
import util.MathHelper;

public final class GuiMainMenu extends GuiScreen {
	
	private static final String[] SPLASHES = new String[] { "Not-quite indev!", "Chests on the glass door!", "NP is not in P!", "The blue-twintailed girl is right!", "In development hell, did I development sin?", "Bubbles from the gum machine!", "[INSERT SPLASH HERE]", "Full-stop!", "[EXTREMELY LOUD INCORRECT BUZZER]" };
	private static final String CURRENT_SPLASH = SPLASHES[(int) (Math.random() * (double) SPLASHES.length)];

	public final void updateScreen() {}

	protected final void keyTyped(char character, int keycode) {}

	public final void initGui() {
		this.controlList.clear();
		this.controlList.add(new GuiButtonText(1, this.width / 2 - 100, this.height / 4 + 48, "Generate new level..."));
		this.controlList.add(new GuiButtonText(2, this.width / 2 - 100, this.height / 4 + 72, "Load level.."));
		this.controlList.add(new GuiButtonText(0, this.width / 2 - 100, this.height / 4 + 96, "Options..."));
		this.controlList.add(new GuiButtonText(3, this.width / 2 - 100, this.height / 4 + 132, "Exit Game"));
		
		// disable load level for some reason
		if (this.mc.session == null)
			this.controlList.get(1).enabled = false;
	}

	protected final void actionPerformed(GuiButton button) {
		
		switch (button.id) {
		
			case 0:
				this.mc.displayGuiScreen(new GuiOptions(this, this.mc.options));
				break;
				
			case 1:
				this.mc.displayGuiScreen(new GuiNewLevel(this));
				break;
				
			case 2:
				if (this.mc.session != null)
					this.mc.displayGuiScreen(new GuiLoadLevel(this));
				break;
				
			case 3:
				this.mc.shutdownMinecraftApplet();
				break;
		}

	}

	public final void drawScreen(int mouseX, int mouseY) {
	    this.drawDefaultBackground();

	    // Set texture filtering to linear
	    GL11.glTexParameteri(GL11.GL_TEXTURE_2D, GL11.GL_TEXTURE_MAG_FILTER, GL11.GL_LINEAR);
	    GL11.glTexParameteri(GL11.GL_TEXTURE_2D, GL11.GL_TEXTURE_MIN_FILTER, GL11.GL_LINEAR);

	    // Draw the logo
	    GL11.glBindTexture(GL11.GL_TEXTURE_2D, this.mc.renderEngine.getTexture("/gui/logo.png"));
	    GL11.glColor4f(1.0F, 1.0F, 1.0F, 1.0F);
	    Tessellator.instance.setColorOpaque_I(16777215);
	    this.drawTexturedModalRect((this.width - 256) / 2, 30, 0, 0, 256, 64);

	    // Draw "Forever Indev" text in cyan under the logo, moved up and larger
	    GL11.glPushMatrix();
	    GL11.glTranslatef((this.width / 2), 75.0F, 0.0F); // Move it up more
	    float scaleIndev = 1.5F; // Make it larger
	    GL11.glScalef(scaleIndev, scaleIndev, 1);
	    String indevText = "Forever Indev";
	    drawCenteredString(this.fontRenderer, indevText, 0, 0, 65535);  // 65535 is the color code for cyan
	    GL11.glPopMatrix();

	    // Draw other elements
	    String text = "Made by Blue. Distribute!";
	    drawString(this.fontRenderer, text, this.width - this.fontRenderer.getStringWidth(text) - 2, this.height - 10, 16777215);

	    // Memory info
	    long maxMem = Runtime.getRuntime().maxMemory();
	    long totalMem = Runtime.getRuntime().totalMemory();
	    long freeMem = Runtime.getRuntime().freeMemory();
	    long what = maxMem - freeMem;

	    text = "Free memory: " + what * 100L / maxMem + "% of " + maxMem / 1024L / 1024L + "MB";
	    drawString(this.fontRenderer, text, this.width - this.fontRenderer.getStringWidth(text) - 2, 2, 8421504);

	    text = "Allocated memory: " + totalMem * 100L / maxMem + "% (" + totalMem / 1024L / 1024L + "MB)";
	    drawString(this.fontRenderer, text, this.width - this.fontRenderer.getStringWidth(text) - 2, 12, 8421504);

	    // Draw buttons and splash text
	    super.drawScreen(mouseX, mouseY);

	    // Draw splash text
	    GL11.glPushMatrix();
	    GL11.glTranslatef((float) (this.width / 2 + 110), 85.0F, 0.0F);
	    GL11.glRotatef(-20.0F, 0.0F, 0.0F, 1.0F);

	    float scale = 1.8F - MathHelper.abs(MathHelper.sin((float)(System.currentTimeMillis() % 1000L) / 1000.0F * (float)Math.PI * 2.0F) * 0.1F);
	    scale = scale * 100.0F / (float)(this.fontRenderer.getStringWidth(CURRENT_SPLASH) + 32);
	    GL11.glScalef(scale, scale, 1);
	    drawCenteredString(this.fontRenderer, CURRENT_SPLASH, 0, -8, 16776960);

	    GL11.glPopMatrix();
	}
}

Redesign the main menu above based off the code below

package net.minecraft.src;

import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.Random;

import org.lwjgl.opengl.GL11;
import org.lwjgl.util.glu.GLU;

public class GuiMainMenu extends GuiScreen {
    private static final Random rand = new Random();
    private static final String[] SURVIVAL_TEST_JOKES = {
        "Creepers used to give you a hug before exploding!",
        "Red mushrooms, not so tasty!",
        "Brown mushrooms for health!",
        "Skeletons with no bows!",
        "TNT in your hotbar!",
        "Points for killing pigs!",
        "Zombies drop armor?",
        "Press TAB to shoot arrows!",
        "Purple arrows everywhere!",
        "Explosive skeletons!"
    };
    private String[] logoBlockLayers = new String[]{
        " *   * * *   * *** *** *** *** *** ***",
        " ** ** * **  * *   *   * * * * *    * ",
        " * * * * * * * **  *   **  *** **   * ",
        " *   * * *  ** *   *   * * * * *    * ",
        " *   * * *   * *** *** * * * * *    * "
    };
    private LogoEffectRandomizer[][] logoEffects;
    private float updateCounter = 0.0F;
    private String splashString = "Welcome to Minecraft!";

    public GuiMainMenu() {
        loadSplashStrings();
    }

    private void loadSplashStrings() {
        ArrayList<String> arrayList = new ArrayList<>();
        try (BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(GuiMainMenu.class.getResourceAsStream("/title/splashes.txt")))) {
            String line;
            while ((line = bufferedReader.readLine()) != null) {
                line = line.trim();
                if (line.length() > 0) {
                    arrayList.add(line);
                }
            }

            // Add jokes about Survival Test
            for (String joke : SURVIVAL_TEST_JOKES) {
                arrayList.add(joke);
            }

            if (!arrayList.isEmpty()) {
                this.splashString = arrayList.get(rand.nextInt(arrayList.size()));
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    public void updateScreen() {
        updateCounter += 0.1F;
        if (logoEffects != null) {
            for (LogoEffectRandomizer[] row : logoEffects) {
                for (LogoEffectRandomizer effect : row) {
                    effect.updateLogoEffects();
                }
            }
        }
    }

    protected void keyTyped(char character, int key) {}

    public void initGui() {
        Calendar calendar = Calendar.getInstance();
        calendar.setTime(new Date());
        if (calendar.get(Calendar.MONTH) + 1 == 11 && calendar.get(Calendar.DAY_OF_MONTH) == 9) {
            this.splashString = "Happy birthday, ez!";
        } else if (calendar.get(Calendar.MONTH) + 1 == 6 && calendar.get(Calendar.DAY_OF_MONTH) == 1) {
            this.splashString = "Happy birthday, Notch!";
        } else if (calendar.get(Calendar.MONTH) + 1 == 12 && calendar.get(Calendar.DAY_OF_MONTH) == 24) {
            this.splashString = "Merry X-mas!";
        } else if (calendar.get(Calendar.MONTH) + 1 == 1 && calendar.get(Calendar.DAY_OF_MONTH) == 1) {
            this.splashString = "Happy new year!";
        }

        controlList.clear();
        controlList.add(new GuiButton(1, width / 2 - 100, height / 4 + 40, "Singleplayer"));
        controlList.add(new GuiButton(2, width / 2 - 100, height / 4 + 70, "Multiplayer"));
        controlList.add(new GuiButton(3, width / 2 - 100, height / 4 + 100, "Credits"));
        controlList.add(new GuiButton(4, width / 2 - 100, height / 4 + 130, "Exit"));
        if (this.mc.session == null) {
            ((GuiButton)this.controlList.get(1)).enabled = false;
        }
    }

    protected void actionPerformed(GuiButton button) {
        switch (button.id) {
            case 0:
                this.mc.displayGuiScreen(new GuiOptions(this, this.mc.options));
                break;
            case 1:
                this.mc.displayGuiScreen(new GuiSelectWorld(this));
                break;
            case 2:
                this.mc.displayGuiScreen(new GuiMultiplayer(this));
                break;
            case 3:
                this.mc.displayGuiScreen(new GuiCredits(this));
                break;
            case 4:
                System.exit(0);
                break;
            default:
                break;
        }
    }

    public void drawScreen(int mouseX, int mouseY, float renderPartialTick) {
        drawDefaultBackground();
        drawLogo(renderPartialTick);
        drawSplashText();
        drawMemoryInfo();
        super.drawScreen(mouseX, mouseY, renderPartialTick);
    }

    private void drawLogo(float renderPartialTick) {
        if (logoEffects == null) {
            logoEffects = new LogoEffectRandomizer[logoBlockLayers[0].length()][logoBlockLayers.length];
            for (int x = 0; x < logoEffects.length; ++x) {
                for (int y = 0; y < logoEffects[x].length; ++y) {
                    logoEffects[x][y] = new LogoEffectRandomizer(this, x, y);
                }
            }
        }

        GL11.glMatrixMode(GL11.GL_PROJECTION);
        GL11.glPushMatrix();
        GL11.glLoadIdentity();
        ScaledResolution scaledResolution = new ScaledResolution(this.mc.displayWidth, this.mc.displayHeight);
        int viewportSize = 120 * scaledResolution.scaleFactor;
        GLU.gluPerspective(70.0F, (float)this.mc.displayWidth / (float)viewportSize, 0.05F, 100.0F);
        GL11.glViewport(0, this.mc.displayHeight - viewportSize, this.mc.displayWidth, viewportSize);
        GL11.glMatrixMode(GL11.GL_MODELVIEW);
        GL11.glPushMatrix();
        GL11.glLoadIdentity();
        GL11.glDisable(GL11.GL_CULL_FACE);
        GL11.glCullFace(GL11.GL_BACK);
        GL11.glDepthMask(true);

        for (int i = 0; i < 3; ++i) {
            GL11.glPushMatrix();
            GL11.glTranslatef(0.4F, 0.6F, -12.0F);
            if (i == 0) {
                GL11.glClear(GL11.GL_DEPTH_BUFFER_BIT);
                GL11.glTranslatef(0.0F, -0.4F, 0.0F);
                GL11.glScalef(0.98F, 1.0F, 1.0F);
                GL11.glEnable(GL11.GL_BLEND);
                GL11.glBlendFunc(GL11.GL_SRC_ALPHA, GL11.GL_ONE_MINUS_SRC_ALPHA);
            }
            if (i == 1) {
                GL11.glDisable(GL11.GL_BLEND);
                GL11.glClear(GL11.GL_DEPTH_BUFFER_BIT);
            }
            if (i == 2) {
                GL11.glEnable(GL11.GL_BLEND);
                GL11.glBlendFunc(GL11.GL_SRC_COLOR, GL11.GL_ONE);
            }
            GL11.glScalef(1.0F, -1.0F, 1.0F);
            GL11.glRotatef(15.0F, 1.0F, 0.0F, 0.0F);
            GL11.glScalef(0.89F, 1.0F, 0.4F);
            GL11.glTranslatef((float)(-logoBlockLayers[0].length()) * 0.5F, (float)(-logoBlockLayers.length) * 0.5F, 0.0F);
            GL11.glBindTexture(GL11.GL_TEXTURE_2D, this.mc.renderEngine.getTexture("/terrain.png"));
            if (i == 0) {
                GL11.glBindTexture(GL11.GL_TEXTURE_2D, this.mc.renderEngine.getTexture("/title/black.png"));
            }
            RenderBlocks renderBlocks = new RenderBlocks();
            for (int x = 0; x < logoBlockLayers.length; ++x) {
                for (int y = 0; y < logoBlockLayers[x].length(); ++y) {
                    char c = logoBlockLayers[x].charAt(y);
                    if (c != ' ') {
                        GL11.glPushMatrix();
                        LogoEffectRandomizer effect = logoEffects[y][x];
                        float currentHeight = (float) (effect.prevHeight + (effect.height - effect.prevHeight) * renderPartialTick);
                        float scale = 1.0F;
                        if (effect.shouldApplySpecialEffect()) {
                            scale = currentHeight * 0.04F + 1.0F;
                            currentHeight = 0.0F;
                        }
                        GL11.glTranslatef((float)y, (float)x, currentHeight);
                        GL11.glScalef(scale, scale, scale);
                        renderBlocks.renderBlockAsItem(Block.stone, 1.0F);
                        GL11.glPopMatrix();
                    }
                }
            }
            GL11.glPopMatrix();
        }

        GL11.glDisable(GL11.GL_BLEND);
        GL11.glMatrixMode(GL11.GL_PROJECTION);
        GL11.glPopMatrix();
        GL11.glMatrixMode(GL11.GL_MODELVIEW);
        GL11.glPopMatrix();
        GL11.glViewport(0, 0, this.mc.displayWidth, this.mc.displayHeight);
        GL11.glEnable(GL11.GL_CULL_FACE);
    }

    private void drawSplashText() {
        // Bind the texture if needed, e.g., GL11.glBindTexture(GL11.GL_TEXTURE_2D, this.mc.renderEngine.getTexture("/gui/logo.png"));
        GL11.glColor4f(1.0F, 1.0F, 1.0F, 1.0F); // Set color

        GL11.glPushMatrix();
        
        // Translate to the same position as in drawScreen
        GL11.glTranslatef((float)(this.width / 2 + 90), 70.0F, 0.0F);
        
        // Apply a fixed rotation
        float fixedRotationAngle = -20.0F; // Fixed rotation angle as in drawScreen
        GL11.glRotatef(fixedRotationAngle, 0.0F, 0.0F, 1.0F);

        // Calculate scaling factor based on time
        float scale = 1.8F - MathHelper.abs(MathHelper.sin((float)(System.currentTimeMillis() % 1000L) / 1000.0F * (float)Math.PI * 2.0F) * 0.1F);
        scale = scale * 100.0F / (float)(this.fontRenderer.getStringWidth(this.splashString) + 32);
        GL11.glScalef(scale, scale, scale);

        // Draw the splash string
        drawCenteredString(this.fontRenderer, this.splashString, 0, -8, 16776960);

        GL11.glPopMatrix();
    }



    private void drawMemoryInfo() {
        String memoryInfo = String.format("Memory: %dMB / %dMB", (Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory()) / (1024 * 1024), Runtime.getRuntime().maxMemory() / (1024 * 1024));
        drawCenteredString(fontRenderer, memoryInfo, width / 2, height - 20, 16777215);
    }

    static Random getRandom() {
        return rand;
    }
}