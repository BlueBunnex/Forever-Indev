public final void doRender(Entity var1, float var2, float var3, float var4, float var5, float var6) {
    EntityItem var13 = (EntityItem) var1;
    this.random.setSeed(187L);
    ItemStack var7 = var13.item;
    GL11.glPushMatrix();
    float var8 = 0.0F; // Keep the item on the ground
    float rotationAngle = (((float) var13.age + var6) / 20.0F + var13.hoverStart) * (180.0F / (float) Math.PI);
    byte var9 = 1;
    if (var13.item.stackSize > 1) {
        var9 = 2;
    }

    if (var13.item.stackSize > 5) {
        var9 = 3;
    }

    if (var13.item.stackSize > 20) {
        var9 = 4;
    }

    GL11.glTranslatef(var2, var3 + var8, var4);
    GL11.glEnable(GL11.GL_NORMALIZE);
    if (var7.itemID < 256 && Block.blocksList[var7.itemID].getRenderType() == 0) {
        this.loadTexture("/terrain.png");
        float scale = 0.25F;
        if (!Block.blocksList[var7.itemID].renderAsNormalBlock() && var7.itemID != Block.slabHalf.blockID) {
            scale = 0.5F;
        }

        GL11.glScalef(scale, scale, scale);

        for (int i = 0; i < var9; ++i) {
            GL11.glPushMatrix();
            if (i > 0) {
                float offsetX = (this.random.nextFloat() * 2.0F - 1.0F) * 0.2F / scale;
                float offsetY = (this.random.nextFloat() * 2.0F - 1.0F) * 0.2F / scale;
                float offsetZ = (this.random.nextFloat() * 2.0F - 1.0F) * 0.2F / scale;
                GL11.glTranslatef(offsetX, offsetY, offsetZ);
            }
            GL11.glRotatef(rotationAngle, 0.0F, 1.0F, 0.0F); // Smooth rotation around y-axis
            this.renderBlocks.renderBlockOnInventory(Block.blocksList[var7.itemID]);
            GL11.glPopMatrix();
        }
    } else {
        GL11.glScalef(0.5F, 0.5F, 0.5F);
        int iconIndex = var7.getItem().getIconIndex();
        if (var7.itemID < 256) {
            this.loadTexture("/terrain.png");
        } else {
            this.loadTexture("/gui/items.png");
        }

        Tessellator tessellator = Tessellator.instance;
        float minU = (float) (iconIndex % 16 << 4) / 256.0F;
        float maxU = (float) ((iconIndex % 16 << 4) + 16) / 256.0F;
        float minV = (float) (iconIndex / 16 << 4) / 256.0F;
        float maxV = (float) ((iconIndex / 16 << 4) + 16) / 256.0F;

        for (int i = 0; i < var9; ++i) {
            GL11.glPushMatrix();
            if (i > 0) {
                float offsetX = (this.random.nextFloat() * 2.0F - 1.0F) * 0.3F;
                float offsetY = (this.random.nextFloat() * 2.0F - 1.0F) * 0.3F;
                float offsetZ = (this.random.nextFloat() * 2.0F - 1.0F) * 0.3F;
                GL11.glTranslatef(offsetX, offsetY, offsetZ);
            }

            GL11.glRotatef(180.0F - this.renderManager.playerViewY, 0.0F, 1.0F, 0.0F);
            GL11.glRotatef(rotationAngle, 0.0F, 1.0F, 0.0F); // Smooth rotation around y-axis
            tessellator.startDrawingQuads();
            tessellator.setNormal(0.0F, 1.0F, 0.0F);
            tessellator.addVertexWithUV(-0.5F, -0.25F, 0.0F, minU, maxV);
            tessellator.addVertexWithUV(0.5F, -0.25F, 0.0F, maxU, maxV);
            tessellator.addVertexWithUV(0.5F, 12.0F / 16.0F, 0.0F, maxU, minV);
            tessellator.addVertexWithUV(-0.5F, 12.0F / 16.0F, 0.0F, minU, minV);
            tessellator.draw();
            GL11.glPopMatrix();
        }
    }

    GL11.glDisable(GL11.GL_NORMALIZE);
    GL11.glPopMatrix();
}
