package net.minecraft.client.gui;

import net.minecraft.client.GameSettings;

public final class GuiOptions extends GuiScreen {
	
	private GuiScreen parentScreen;
	private String screenTitle = "Options";
	private GameSettings options;

	public GuiOptions(GuiScreen parentScreen, GameSettings options) {
		this.parentScreen = parentScreen;
		this.options = options;
	}

	public final void initGui() {
		if (options == null) {
			System.err.println("GameSettings is null in GuiOptions.");
			return;
		}

		this.controlList.clear(); // Clear previous controls if any

		// Create buttons for each option
		for (int i = 0; i < options.numberOfOptions; i++) {
			String optionString = options.setOptionString(i); // Get the option display string
			this.controlList.add(new GuiButtonText(i, this.width / 2 - 155 + (i % 2) * 160, this.height / 6 + 24 * (i >> 1), 150, 20, optionString));
		}

		this.controlList.add(new GuiButtonText(100, this.width / 2 - 100, this.height / 6 + 120 + 12, "Controls..."));
		this.controlList.add(new GuiButtonText(200, this.width / 2 - 100, this.height / 6 + 168, "Done"));
	}

	protected final void actionPerformed(GuiButton button) {
		if (button == null || !button.enabled) return;

		if (button.id < 100) {
			if (this.options != null) {
				this.options.setOptionValue(button.id, 1); // Update the option
				((GuiButtonText) button).displayString = this.options.setOptionString(button.id); // Refresh the display string
			} else {
				System.err.println("GameSettings is null in actionPerformed.");
			}
		} else if (button.id == 100) {
			this.mc.displayGuiScreen(new GuiControls(this, this.options)); // Navigate to controls screen
		} else if (button.id == 200) {
			this.mc.displayGuiScreen(this.parentScreen); // Navigate back to parent screen
		}
	}

	public final void drawScreen(int mouseX, int mouseY) {
		this.drawDefaultBackground();
		drawCenteredString(this.fontRenderer, this.screenTitle, this.width / 2, 20, 16777215);
		
		super.drawScreen(mouseX, mouseY);
	}
}
